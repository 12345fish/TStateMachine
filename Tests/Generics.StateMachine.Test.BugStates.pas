unit Generics.StateMachine.Test.BugStates;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

{ TODO : Figure out EnumToString }

interface

uses
  TestFramework, Generics.Collections, System.SysUtils, Generics.StateMachine;

type
  TBugStates = (New, Assigned, Reproduced, Fixed, Tested, Released, Returned, Withdrawn);
  TBugTriggers = (Assign, Reproduce, Return, Update, Cancel, Fix, Test, Release, Withdraw, Reject);
  TBugTriggerSet = set of TBugTriggers;
  // Test methods for BugStateMachine
  TestBugStates = class(TTestCase)
  strict private
    FBugState: TStateMachine<TBugStates, TBugTriggers>;
    procedure CheckInvalidTriggers(TriggersToExclude : TBugTriggerSet);
    procedure CheckValidTrigger(Trigger : TBugTriggers; DestinationState : TBugStates);
    procedure NavigateToStartingState(StartingState: TBugStates);
    procedure CheckTriggerCount(ExpectedTriggerCount : Integer);
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestNew;
    procedure TestInvalidTriggersFromNew;
    procedure TestAssignFromNew;
    procedure TestWithdrawFromNew;
    procedure TestAssigned;
    procedure TestInvalidTriggersFromAssigned;
    procedure TestReproduceFromAssigned;
    procedure TestReturnFromAssigned;
    procedure TestRejectFromAssigned;
    procedure TestReproduced;
    procedure TestInvalidTriggersFromReproduced;
    procedure TestFixFromReproduced;
    procedure TestReturned;
    procedure TestInvalidTransitionsFromReturned;
    procedure TestUpdateFromReturned;
    procedure TestWithdrawFromReturned;
    procedure TestFixed;
    procedure TestInvalidTransitionsFromFixed;
    procedure TestTestFromFixed;
    procedure TestReturnFromFixed;
    procedure TestTested;
    procedure TestInvalidTransitionsFromTested;
    procedure TestReleaseFromTested;
    procedure TestReleased;
    procedure TestInvalidTransitionsFromReleased;
    procedure TestWithdrawn;
    procedure TestInvalidTransitionsFromWithdrawn;
  end;

implementation
uses
  rtti;

procedure TestBugStates.CheckInvalidTriggers(TriggersToExclude: TBugTriggerSet);
var
  I: Integer;
begin
  for I := Ord(Low(TBugTriggers)) to Ord(High(TBugTriggers)) do
    if not(TBugTriggers(I) in TriggersToExclude) then
    begin
      try
        FBugState.CurrentState.Execute(TBugTriggers(I));
        CheckTrue(False, 'Executing a non-existant Trigger should have produced an EUnknownTrigger exception');
      except on E: EUnknownTrigger do
        CheckTrue(True, 'As expected');
      end;
    end;
end;

procedure TestBugStates.CheckTriggerCount(ExpectedTriggerCount: Integer);
begin
  CheckTrue(FBugState.CurrentState.TriggerCount = ExpectedTriggerCount,
            Format('Should be %d trigger(s) on %s, not %d',
                   [ExpectedTriggerCount, TValue.From<TBugStates>(FBugState.CurrentState.State).ToString, FBugState.CurrentState.TriggerCount]));
end;

procedure TestBugStates.CheckValidTrigger(Trigger: TBugTriggers; DestinationState : TBugStates);
begin
  try
    FBugState.CurrentState.Execute(Trigger);
    CheckTrue(FBugState.CurrentState.State = DestinationState,
            Format('State should be %s after Trigger but found %s',
                   [TValue.From<TBugStates>(DestinationState).ToString,
                    TValue.From<TBugStates>(FBugState.CurrentState.State).ToString]));
  except on E: EUnknownTrigger do
    CheckTrue(False, 'Executing a valid Trigger should not have produced an EUnknownTrigger exception');
  end;
end;

procedure TestBugStates.NavigateToStartingState(StartingState: TBugStates);
begin
  case StartingState of
//  New         : // initial state, do nothing
    Assigned    : begin
                    FBugState.CurrentState.Execute(TBugTriggers.Assign);
                  end;
    Reproduced  : begin
                    FBugState.CurrentState.Execute(TBugTriggers.Assign);
                    FBugState.CurrentState.Execute(TBugTriggers.Reproduce);
                  end;
    Fixed       : begin
                    NavigateToStartingState(TBugStates.Reproduced);
                    FBugState.CurrentState.Execute(TBugTriggers.Fix);
                  end;
    Tested      : begin
                    NavigateToStartingState(TBugStates.Fixed);
                    FBugState.CurrentState.Execute(TBugTriggers.Test);
                  end;
    Released    : begin
                    NavigateToStartingState(TBugStates.Tested);
                    FBugState.CurrentState.Execute(TBugTriggers.Release);
                  end;
    Returned    : begin
                    FBugState.CurrentState.Execute(TBugTriggers.Assign);
                    FBugState.CurrentState.Execute(TBugTriggers.Return);
                  end;
    Withdrawn   : begin
                    FBugState.CurrentState.Execute(TBugTriggers.Withdraw);
                  end;
  end;
  CheckTrue(FBugState.CurrentState.State = StartingState,
            Format('Starting state for the tests should be %s, but found %s',
              [TValue.From<TBugStates>(StartingState).ToString,
               TValue.From<TBugStates>(FBugState.CurrentState.State).ToString]));

end;

procedure TestBugStates.SetUp;
begin
  FBugState := TStateMachine<TBugStates, TBugTriggers>.Create;
  FBugState.State(TBugStates.New)
              .Initial
              .Trigger(TBugTriggers.Assign, TBugStates.Assigned)
              .Trigger(TBugTriggers.Withdraw, TBugStates.Withdrawn);
  FBugState.State(TBugStates.Assigned)
              .Trigger(TBugTriggers.Reproduce, TBugStates.Reproduced)
              .Trigger(TBugTriggers.Return, TBugStates.Returned)
              .Trigger(TBugTriggers.Reject, TBugStates.New);
  FBugState.State(TBugStates.Reproduced)
              .Trigger(TBugTriggers.Fix, TBugStates.Fixed);
  FBugState.State(TBugStates.Returned)
              .Trigger(TBugTriggers.Update, TBugStates.New)
              .Trigger(TBugTriggers.Withdraw, TBugStates.Withdrawn);
  FBugState.State(TBugStates.Fixed)
              .Trigger(TBugTriggers.Test, TBugStates.Tested)
              .Trigger(TBugTriggers.Return, TBugStates.Assigned);
  FBugState.State(TBugStates.Tested)
              .Trigger(TBugTriggers.Release, TBugStates.Released);
  FBugState.State(TBugStates.Released);
  FBugState.State(TBugStates.Withdrawn);
  FBugState.Active := True;
end;

procedure TestBugStates.TearDown;
begin
  FBugState.Free;
  FBugState := nil;
end;

procedure TestBugStates.TestNew;
begin
  NavigateToStartingState(TBugStates.New);
  CheckTriggerCount(2);
end;

procedure TestBugStates.TestInvalidTriggersFromNew;
begin
  CheckTrue(FBugState.CurrentState.State = TBugStates.New,
            'Starting state for the tests should be TBugState.New');

  CheckInvalidTriggers([TBugTriggers.Assign, TBugTriggers.Withdraw]);
end;

procedure TestBugStates.TestAssignFromNew;
begin
  CheckTrue(FBugState.CurrentState.State = TBugStates.New,
            'Starting State should be TBugState.New');
  CheckValidTrigger(TBugTriggers.Assign, TBugStates.Assigned);
end;

procedure TestBugStates.TestWithdrawFromNew;
begin
  CheckTrue(FBugState.CurrentState.State = TBugStates.New, 'Initial State should be TBugState.New');
  CheckValidTrigger(TBugTriggers.Withdraw, TBugStates.Withdrawn);
end;

procedure TestBugStates.TestAssigned;
begin
  NavigateToStartingState(TBugStates.Assigned);
  CheckTriggerCount(3);
end;

procedure TestBugStates.TestInvalidTriggersFromAssigned;
begin
  NavigateToStartingState(TBugStates.Assigned);
  CheckInvalidTriggers([TBugTriggers.Reject, TBugTriggers.Reproduce, TBugTriggers.Return]);
end;

procedure TestBugStates.TestRejectFromAssigned;
begin
  NavigateToStartingState(TBugStates.Assigned);
  CheckValidTrigger(TBugTriggers.Reject, TBugStates.New);
end;

procedure TestBugStates.TestReleased;
begin
  NavigateToStartingState(TBugStates.Released);
  CheckTriggerCount(0);
end;

procedure TestBugStates.TestReleaseFromTested;
begin
  NavigateToStartingState(TBugStates.Tested);
  CheckValidTrigger(TBugTriggers.Release, TBugStates.Released);
end;

procedure TestBugStates.TestReproduceFromAssigned;
begin
  NavigateToStartingState(TBugStates.Assigned);
  CheckValidTrigger(TBugTriggers.Reproduce, TBugStates.Reproduced);
end;

procedure TestBugStates.TestReturnFromAssigned;
begin
  NavigateToStartingState(TBugStates.Assigned);
  CheckValidTrigger(TBugTriggers.Return, TBugStates.Returned);
end;

procedure TestBugStates.TestReturnFromFixed;
begin
  NavigateToStartingState(TBugStates.Fixed);
  CheckValidTrigger(TBugTriggers.Return, TBugStates.Assigned);
end;

procedure TestBugStates.TestTested;
begin
  NavigateToStartingState(TBugStates.Tested);
  CheckTriggerCount(1);
end;

procedure TestBugStates.TestTestFromFixed;
begin
  NavigateToStartingState(TBugStates.Fixed);
  CheckValidTrigger(TBugTriggers.Test, TBugStates.Tested);
end;

procedure TestBugStates.TestReproduced;
begin
  NavigateToStartingState(TBugStates.Reproduced);
  CheckTriggerCount(1);
end;

procedure TestBugStates.TestInvalidTriggersFromReproduced;
begin
  NavigateToStartingState(TBugStates.Reproduced);
  CheckInvalidTriggers([TBugTriggers.Fix]);
end;

procedure TestBugStates.TestFixed;
begin
  NavigateToStartingState(TBugStates.Fixed);
  CheckTriggerCount(2);
end;

procedure TestBugStates.TestFixFromReproduced;
begin
  NavigateToStartingState(TBugStates.Reproduced);
  CheckValidTrigger(TBugTriggers.Fix, TBugStates.Fixed);
end;

procedure TestBugStates.TestReturned;
begin
  NavigateToStartingState(TBugStates.Returned);
  CheckTriggerCount(2);
end;

procedure TestBugStates.TestInvalidTransitionsFromFixed;
begin
  NavigateToStartingState(TBugStates.Fixed);
  CheckInvalidTriggers([TBugTriggers.Test, TBugTriggers.Return]);
end;

procedure TestBugStates.TestInvalidTransitionsFromReleased;
begin
  NavigateToStartingState(TBugStates.Released);
  CheckInvalidTriggers([]);
end;

procedure TestBugStates.TestInvalidTransitionsFromReturned;
begin
  NavigateToStartingState(TBugStates.Returned);
  CheckInvalidTriggers([TBugTriggers.Update, TBugTriggers.Withdraw]);
end;

procedure TestBugStates.TestInvalidTransitionsFromTested;
begin
  NavigateToStartingState(TBugStates.Tested);
  CheckInvalidTriggers([TBugTriggers.Release]);
end;

procedure TestBugStates.TestInvalidTransitionsFromWithdrawn;
begin
  NavigateToStartingState(TBugStates.Withdrawn);
  CheckInvalidTriggers([]);
end;

procedure TestBugStates.TestWithdrawFromReturned;
begin
  NavigateToStartingState(TBugStates.Returned);
  CheckValidTrigger(TBugTriggers.Withdraw, TBugStates.Withdrawn);
end;

procedure TestBugStates.TestWithdrawn;
begin
  NavigateToStartingState(TBugStates.Withdrawn);
  CheckTriggerCount(0);
end;

procedure TestBugStates.TestUpdateFromReturned;
begin
  NavigateToStartingState(TBugStates.Returned);
  CheckValidTrigger(TBugTriggers.Update, TBugStates.New);
end;


initialization
  // Register any test cases with the test runner
  RegisterTest('Functional Tests', TestBugStates.Suite);
end.

